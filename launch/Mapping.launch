<launch>

<!-- MAVROS -->	
<arg name="fcu_url" default="udp://:14540@127.0.0.1:14557" />
<arg name="gcs_url" default="" />
<arg name="tgt_system" default="1" />
<arg name="tgt_component" default="1" />
<arg name="log_output" default="screen" />
<arg name="fcu_protocol" default="v2.0" />
<arg name="respawn_mavros" default="false" />

<include file="$(find mavros)/launch/node.launch">
	<arg name="pluginlists_yaml" value="$(find mavros)/launch/px4_pluginlists.yaml" />
	<arg name="config_yaml" value="$(find mavros)/launch/px4_config.yaml" />

	<arg name="fcu_url" value="$(arg fcu_url)" />
	<arg name="gcs_url" value="$(arg gcs_url)" />
	<arg name="tgt_system" value="$(arg tgt_system)" />
	<arg name="tgt_component" value="$(arg tgt_component)" />
	<arg name="log_output" value="$(arg log_output)" />
	<arg name="fcu_protocol" value="$(arg fcu_protocol)" />
	<arg name="respawn_mavros" default="$(arg respawn_mavros)" />
</include>


<!-- PCL Voxel Filter (Downsampling the point cloud)-->
<node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />

  <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
  <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
    <remap from="~input" to="/camera/depth/points" />
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.01
      filter_limit_max: 15
      filter_limit_negative: False
      leaf_size: 0.10
    </rosparam>

    <rosparam>
      filter_field_name: x
      filter_limit_min: -3
      filter_limit_max: 3
      filter_limit_negative: False
      leaf_size: 0.10
    </rosparam>

    <rosparam>
      filter_field_name: y
      filter_limit_min: -3
      filter_limit_max: 3
      filter_limit_negative: False
      leaf_size: 0.10
    </rosparam>

</node>

<!-- transform from local_origin_ned to map-->
<node pkg="tf" type="static_transform_publisher" name="mapTF_broadcaster" args="0 0 0 0 0 0 1 local_origin_ned map 100" />

<!-- conversion from camera frame to base link frame (align camera X-Y-Z axes with that of Mavros)-->
<node pkg="tf" type="static_transform_publisher" name="camTF_broadcaster" args="0.1 0 0 -1.57 0 -1.57  base_link camera_link 100" />


<!-- Publish camera pose in world frame (read from EKF pose estimates and published over TF for octomap generation)-->
<node pkg="FastPlannerOctomap" type="pubCamPose" name="pubCamPose"/>






<!--mention the octomap launch commands-->

	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.20" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="15" />
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/voxel_grid/output" />
	
	</node>



<node type="rviz" name="rviz" pkg="rviz" args="-d $(find FastPlannerOctomap)/rviz/planner.rviz" />

</launch>
